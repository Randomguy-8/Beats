#! /bin/bash 
set -e

# Predefine
Version=22.3.20
lastupdated="20 MAR 2021"
# Colors
Blue='\033[1;34m'
Green='\033[1;32m'
Purple='\033[1;35m'
Cyan='\033[1;36m'
Grey='\033[1;37m'
Lgrey='\033[0;37m'
White='\033[1;37m'
Noc='\033[0m'

## Title
title_() {
  echo -en "\n$Purple █▄▄ █▀▀ ▄▀█ ▀█▀ █▀\n █▄█ ██▄ █▀█  █  ▄█\n$Noc"
}
## Shuffell Directory back and forth
shuffel_directory_(){
	# Cd to music or pwd
	if [[ $DoShuffel == true ]]; then
		if [[ $turn == 1 ]]; then
			if [[ -e ~/Music ]]; then
				cd ~/Music
			else
				mkdir ~/Music
				cd ~/Music
			fi
			turn=2 # next time sd_ execute it will goto Initial directory
		elif [[ $turn == 2 ]]; then
			cd $InitialDirectory
			turn=1
		fi
	fi
}
## list Music
list_(){
	clear && title_ && shuffel_directory_
	# Directory: PWD
	echo -e "\n\033[7;34m~ Directory:$Grey" $PWD "$Noc$Cyan\n" 
	if ls $PWD/*.mp3 &>/dev/null ; then
		# List Beats and save inside ~/Beats/data/.beats_file 
		ls *.mp3 | nl -s ". " | cut -c 5- & ls *.mp3 | nl | cut -c 8- | cat > ~/Beats/data/.beats_file
	else
		echo -e "$Grey No file found."
	fi
	echo -en "\n$Green+ Beat no: $White" & read input1
	# If input is null then change pwd
	if [[ -z $input1 ]]; then
		DoShuffel=true && list_
	fi
}
information_of_beat_(){
	title_
	Artist=$(mp3info -p %a "$BeatFile" 2>/dev/null) 
	Genre=$(mp3info -p %g "$BeatFile" 2>/dev/null)
	Year=$(mp3info -p %y "$BeatFile" 2>/dev/null)
	TotalTime=$(mp3info -p %S "$BeatFile" 2>/dev/null)
	TotalSize=$(mp3info -p %k "$BeatFile" 2>/dev/null)
	Comment=$(mp3info -p %c "$BeatFile" 2>/dev/null)
	echo -e "\n\n$Blue - Beat:$Noc$White $BeatFile$Noc"	
	# Artist
	if [[ $Artist == "" ]]; then
		echo -e "$Blue - Artist:$Noc$White N/A$Noc"	
	else
		echo -e "$Blue - Artist:$Noc$White $Artist$Noc"
	fi
	# Genre
	if [[ $Genre == "" ]]; then
		echo -e "$Blue - Genre:$Noc$White N/A$Noc"
	else
		echo -e "$Blue - Genre:$Noc$White $Genre$Noc"
	fi
	# Year of production
	if [[ $Year == "" ]]; then
		echo -e "$Blue - Year:$Noc$White N/A$Noc"
	else
		echo -e "$Blue - Year:$Noc$White $Year$Noc"
	fi
	# Total Time
	if [[ $TotalTime == "" ]]; then
		echo -e "$Blue - Time:$Noc$White N/A$Noc"	
	else
		echo -e "$Blue - Time:$Noc$White $TotalTime sec$Noc"
	fi
	# Size Of File
	if [[ $TotalSize == "" ]]; then
		echo -e "$Blue - Size:$Noc$White N/A$Noc"	
	else
		echo -e "$Blue - Size:$Noc$White $TotalSize KB$Noc"
	fi
	# Comment
	if [[ $Comment == "" ]]; then
		echo -e "$Blue - Comment:$Noc$White N/A$Noc"	
	else
		echo -e "$Blue - Comment:$Noc$White $Comment$Noc"
	fi
}
functional_keys_(){	
	while(true); do
		read -N 1 FunctionInput
		if [[ $FunctionInput == 'q' || $FunctionInput == 'Q' || $FunctionInput == 'a' || $FunctionInput == 'A' ]]; then
			# Change Volume
			amixer sget Master | awk '/%/ {gsub(/[\[\]%]/,""); print "Volume="$4}' | cat > ~/Beats/data/.beats_default
			source ~/Beats/data/.beats_default
			if [[ $FunctionInput == 'q' || $FunctionInput == 'Q' ]]; then
				Volume=$((Volume + 5))
				if [[ $Volume -ge 100 ]]; then
					Volume=100
				fi
			elif [[ $FunctionInput == 'a' || $FunctionInput == 'A' ]]; then
				Volume=$((Volume - 5))
				if [[ $Volume -le 1 ]]; then
					Volume=0
				fi
			fi
				echo -en "\b Volume: $Volume \r"
				amixer set Master ${Volume}"%" 1>/dev/null
		elif [[ $FunctionInput == 'x' ]]; then
			# Stop Beats
			kill $PRCSa & clear && information_of_beat_ && echo -en "\n\n\033[5;33m Done$Noc\n\n"
			exit
		fi
	done
	functional_keys_
}
## Main screen
InitialDirectory=$PWD && DoShuffel=true	&& turn=1
if [[ ! -d ~/Beats/data ]]; then
mkdir ~/Beats ~/Beats/data 1>&2 > /dev/null
fi
list_ && clear
# stores the name of beat
BeatFile=$(sed -n $input1"p" ~/Beats/data/.beats_file)
while [[ $BeatFile == "" ]]; do
	DoShuffel=false && list_ && clear
	BeatFile=$(sed -n ${input1}"p" ~/Beats/data/.beats_file)
done
information_of_beat_ && echo -en "\n\n\033[5;33m Playing...$Noc\n\n"
# Main binary that plays mp3
mpg321 "$BeatFile" 2>/dev/null & PRCSa=$! && functional_keys_